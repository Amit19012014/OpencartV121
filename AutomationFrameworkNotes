
Day-48
=========
Hybrid Automation Framework Project | POM  Session 1
========================================================================================================================

Automation Framework :
-------------------
We organize automation project files/folders in structured manner.

Objectives
-------------
1) Re-Usability
2) Maintainability
3) Readability

Types of frameworks
-------------------
1) Built-in
    Ex: testng,junit, cucumber ,robot etc.

2)customized (user defined)
    Ex : modular framework, data driven , keyword driven , hybrid driven etc;



Phases/stages
-------------
1) Analysing AUT(Application under testing)
--------------------------------------------

	- Number of pages
	- what are all elements / how/ type
    - what to automate / what we cannot automate


2) choose test cases for automation
-----------------------------------

100 Test cases -----90 automatable  10 cannot automate
100% automation


1)sanity test cases - P1
2) data driven test cases/re-tests   - P2
3) Regression test cases -P3
4) Any other cases - P4

3) Design & Development of framework
-------------------------------------

4) Execution - local, remotely
------------------------------

5) Maintenance
------------------



E-commerce domain
------------------

1) Frontend operations   ( customers/users)

	- register an account
	- login
	- search for the product
	- add/edit/delete products from cart
	- order products
	- reviews
	etc....


2) Backend operations (admins/backend teams)
	- products
	- customers
	- orders
	- store
       etc..


opencart app:
----------------------------------
https://tutorialsninja.com/demo/



Day-49
=========
Hybrid Automation Framework Project | POM  Session 2
========================================================================================================================


Dependencies
--------------
selenium
apache poi
apache poi ooxml
log4j-core
log4j-api
commons-io
commons-lang3
testng
extentreports

Create Folder Structure
--------------------
in src/test/java
--------------
1) pageObject
2) testBase
3) testCases
4) utilities

on project level
----------------
1) logs
2) reports
3) screenshots
4) testData
5) pom.xml (file)
6) TestNG.xml


Development of Hybrid Driven Framework
======================================
1) Test case: Account Registration
====================================
1.1: Create BasePage under "pageObjects" which includes only constructor. This will be invoked by every Page Object Class constructor (Re-usability).
     To create the pageObject we will use this code.

BasePage - ( it is under pageObject package )
========

public class BasePage {
    WebDriver driver;

    public BasePage(WebDriver driver) {
        this.driver = driver;
        PageFactory.initElements(driver, this);
    }
}

1.2: Create Page Object Classes for HomePage, AccountRegistrationPage  under pageObjects package. (These classes extends from BasePage).

HomePage :
==========
public class homePage extends BasePage {

    public homePage(WebDriver driver) {
        super(driver);
    }

    @FindBy(xpath="//span[normalize-space()='My Account']")
    WebElement lnkMyaccount;

    @FindBy(xpath="//a[normalize-space()='Register']")
    WebElement lnkRegister;



    public void clickMyAccount()
    {
        lnkMyaccount.click();
    }

    public void clickRegister()
    {
        lnkRegister.click();
    }

}
=========================================================

AccountRegistrationPage :
=======================
public class AccountRegistrationPage extends BasePage {

    public AccountRegistrationPage(WebDriver driver) {
        super(driver);
    }

    // Locators

    @FindBy(xpath="//input[@id='input-firstname']")
    WebElement txtFirstname;

    @FindBy(xpath="//input[@id='input-lastname']")
    WebElement txtLasttname;

    @FindBy(xpath="//input[@id='input-email']")
    WebElement txtEmail;

    @FindBy(xpath="//input[@id='input-telephone']")
    WebElement txtTelephone;

    @FindBy(xpath="//input[@id='input-password']")
    WebElement txtPassword;

    @FindBy(xpath="//input[@id='input-confirm']")
    WebElement txtConfirmPassword;

    @FindBy(xpath="//input[@name='agree']")
    WebElement chkdPolicy;

    @FindBy(xpath="//input[@value='Continue']")
    WebElement btnContinue;

    @FindBy(xpath = "//h1[normalize-space()='Your Account Has Been Created!']")
    WebElement msgConfirmation;


    //Action Method

    public void setFirstName(String fname) {
        txtFirstname.sendKeys(fname);

    }

    public void setLastName(String lname) {
        txtLasttname.sendKeys(lname);

    }

    public void setEmail(String email) {
        txtEmail.sendKeys(email);

    }

    public void setTelephone(String tel) {
        txtTelephone.sendKeys(tel);

    }

    public void setPassword(String pwd) {
        txtPassword.sendKeys(pwd);

    }

    public void setConfirmPassword(String pwd) {
        txtConfirmPassword.sendKeys(pwd);

    }

    public void setPrivacyPolicy() {
        chkdPolicy.click();

    }

    public void clickContinue() {
        //sol1
        btnContinue.click();

        //sol2
        //btnContinue.submit();

        //sol3
        //Actions act=new Actions(driver);
        //act.moveToElement(btnContinue).click().perform();

        //sol4
        //JavascriptExecutor js=(JavascriptExecutor)driver;
        //js.executeScript("arguments[0].click();", btnContinue);

        //Sol 5
        //btnContinue.sendKeys(Keys.RETURN);

        //Sol6
        //WebDriverWait mywait = new WebDriverWait(driver, Duration.ofSeconds(10));
        //mywait.until(ExpectedConditions.elementToBeClickable(btnContinue)).click();

    }

    public String getConfirmationMsg() {
        try {
            return (msgConfirmation.getText());
        } catch (Exception e) {
            return (e.getMessage());

        }

    }


}
=============================================================================
1.3: Create AccountRegistrationTest under "testCases"
public class TC001_AccountRegistrationTest extends BaseClass {


    @Test
    public void verify_account_registration() throws InterruptedException {

        homePage hp = new homePage(driver);
        hp.clickMyAccount();
        hp.clickRegister();


        AccountRegistrationPage regPage = new AccountRegistrationPage(driver);
        regPage.setFirstName(randomeString().toUpperCase());
        regPage.setLastName(randomeString().toUpperCase());
        regPage.setEmail(randomeString() + "@gmail.com");  //randomly generated Email Address
        regPage.setTelephone(numberString());

        String password = randomAlphaNumeric();

        regPage.setPassword(password);
        regPage.setConfirmPassword(password);

        regPage.setPrivacyPolicy();
        regPage.clickContinue();

        String confmsg = regPage.getConfirmationMsg();
        Assert.assertEquals(confmsg, "Your Account Has Been Created!");

    }
}
================================================================================================

1.4: Create BaseClass under testBase package and copy re-usable methods.
public class BaseClass {
    public WebDriver driver;


    @BeforeClass
    public void setup() {
        driver = new ChromeDriver();
        driver.manage().deleteAllCookies();
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

        driver.get("https://tutorialsninja.com/demo/");
        driver.manage().window().maximize();

    }

    @AfterClass
    public void tearDown() {
        driver.quit();
    }


    public String randomeString() {
        String generatedString = RandomStringUtils.randomAlphabetic(5);
        return generatedString;

    }

    public String numberString() {
        String generatedNumber = RandomStringUtils.randomNumeric(10);
        return generatedNumber;
    }

    public String randomAlphaNumeric() {
        String generatedString = RandomStringUtils.randomAlphabetic(5);
        String generatedNumber = RandomStringUtils.randomNumeric(10);
        return (generatedString + "@" + generatedString);
    }

}
====================================================================================
1.5: Create re-usable methods to generate random numbers and strings in BaseClass.


To generated a random sting we need a user defined method
===========================================================
RandomStringUtils.randomAlphabetic(5);  This comes from "import org.apache.commons.lang3.RandomStringUtils;"

public  String randomeString(){
   String generatedString = RandomStringUtils.randomAlphabetic(5);
    return generatedString;
}

public String numberString() {
   String generatedString = RandomStringUtils.randomNumeric(10);
     return generatedString;
}











