
Day-48
=========
Hybrid Automation Framework Project | POM  Session 1
========================================================================================================================

Automation Framework :
-------------------
We organize automation project files/folders in structured manner.

Objectives
-------------
1) Re-Usability
2) Maintainability
3) Readability

Types of frameworks
-------------------
1) Built-in
    Ex: testng,junit, cucumber ,robot etc.

2)customized (user defined)
    Ex : modular framework, data driven , keyword driven , hybrid driven etc;



Phases/stages
-------------
1) Analysing AUT(Application under testing)
--------------------------------------------

	- Number of pages
	- what are all elements / how/ type
    - what to automate / what we cannot automate


2) choose test cases for automation
-----------------------------------

100 Test cases -----90 automatable  10 cannot automate
100% automation


1)sanity test cases - P1
2) data driven test cases/re-tests   - P2
3) Regression test cases -P3
4) Any other cases - P4

3) Design & Development of framework
-------------------------------------

4) Execution - local, remotely
------------------------------

5) Maintenance
------------------



E-commerce domain
------------------

1) Frontend operations   ( customers/users)

	- register an account
	- login
	- search for the product
	- add/edit/delete products from cart
	- order products
	- reviews
	etc....


2) Backend operations (admins/backend teams)
	- products
	- customers
	- orders
	- store
       etc..


opencart app:
----------------------------------
https://tutorialsninja.com/demo/



Day-49
=========
Hybrid Automation Framework Project | POM  Session 2
========================================================================================================================


Dependencies
--------------
selenium
apache poi
apache poi ooxml
log4j-core
log4j-api
commons-io
commons-lang3
testng
extentreports

Create Folder Structure
--------------------
in src/test/java
--------------
1) pageObject
2) testBase
3) testCases
4) utilities

on project level
----------------
1) logs
2) reports
3) screenshots
4) testData
5) pom.xml (file)
6) TestNG.xml


Development of Hybrid Driven Framework
======================================
1) Test case: Account Registration
====================================
1.1: Create BasePage under "pageObjects" which includes only constructor. This will be invoked by every Page Object Class constructor (Re-usability).
     To create the pageObject we will use this code.

BasePage - ( it is under pageObject package )
========

public class BasePage {
    WebDriver driver;

    public BasePage(WebDriver driver) {
        this.driver = driver;
        PageFactory.initElements(driver, this);
    }
}

1.2: Create Page Object Classes for HomePage, AccountRegistrationPage  under pageObjects package. (These classes extends from BasePage).

HomePage :
==========
public class homePage extends BasePage {

    public homePage(WebDriver driver) {
        super(driver);
    }

    @FindBy(xpath="//span[normalize-space()='My Account']")
    WebElement lnkMyaccount;

    @FindBy(xpath="//a[normalize-space()='Register']")
    WebElement lnkRegister;



    public void clickMyAccount()
    {
        lnkMyaccount.click();
    }

    public void clickRegister()
    {
        lnkRegister.click();
    }

}
=========================================================

AccountRegistrationPage :
=======================
public class AccountRegistrationPage extends BasePage {

    public AccountRegistrationPage(WebDriver driver) {
        super(driver);
    }

    // Locators

    @FindBy(xpath="//input[@id='input-firstname']")
    WebElement txtFirstname;

    @FindBy(xpath="//input[@id='input-lastname']")
    WebElement txtLasttname;

    @FindBy(xpath="//input[@id='input-email']")
    WebElement txtEmail;

    @FindBy(xpath="//input[@id='input-telephone']")
    WebElement txtTelephone;

    @FindBy(xpath="//input[@id='input-password']")
    WebElement txtPassword;

    @FindBy(xpath="//input[@id='input-confirm']")
    WebElement txtConfirmPassword;

    @FindBy(xpath="//input[@name='agree']")
    WebElement chkdPolicy;

    @FindBy(xpath="//input[@value='Continue']")
    WebElement btnContinue;

    @FindBy(xpath = "//h1[normalize-space()='Your Account Has Been Created!']")
    WebElement msgConfirmation;


    //Action Method

    public void setFirstName(String fname) {
        txtFirstname.sendKeys(fname);

    }

    public void setLastName(String lname) {
        txtLasttname.sendKeys(lname);

    }

    public void setEmail(String email) {
        txtEmail.sendKeys(email);

    }

    public void setTelephone(String tel) {
        txtTelephone.sendKeys(tel);

    }

    public void setPassword(String pwd) {
        txtPassword.sendKeys(pwd);

    }

    public void setConfirmPassword(String pwd) {
        txtConfirmPassword.sendKeys(pwd);

    }

    public void setPrivacyPolicy() {
        chkdPolicy.click();

    }

    public void clickContinue() {
        //sol1
        btnContinue.click();

        //sol2
        //btnContinue.submit();

        //sol3
        //Actions act=new Actions(driver);
        //act.moveToElement(btnContinue).click().perform();

        //sol4
        //JavascriptExecutor js=(JavascriptExecutor)driver;
        //js.executeScript("arguments[0].click();", btnContinue);

        //Sol 5
        //btnContinue.sendKeys(Keys.RETURN);

        //Sol6
        //WebDriverWait mywait = new WebDriverWait(driver, Duration.ofSeconds(10));
        //mywait.until(ExpectedConditions.elementToBeClickable(btnContinue)).click();

    }

    public String getConfirmationMsg() {
        try {
            return (msgConfirmation.getText());
        } catch (Exception e) {
            return (e.getMessage());

        }

    }


}
=============================================================================
1.3: Create AccountRegistrationTest under "testCases"
public class TC001_AccountRegistrationTest extends BaseClass {


    @Test
    public void verify_account_registration() throws InterruptedException {

        homePage hp = new homePage(driver);
        hp.clickMyAccount();
        hp.clickRegister();


        AccountRegistrationPage regPage = new AccountRegistrationPage(driver);
        regPage.setFirstName(randomeString().toUpperCase());
        regPage.setLastName(randomeString().toUpperCase());
        regPage.setEmail(randomeString() + "@gmail.com");  //randomly generated Email Address
        regPage.setTelephone(numberString());

        String password = randomAlphaNumeric();

        regPage.setPassword(password);
        regPage.setConfirmPassword(password);

        regPage.setPrivacyPolicy();
        regPage.clickContinue();

        String confmsg = regPage.getConfirmationMsg();
        Assert.assertEquals(confmsg, "Your Account Has Been Created!");

    }
}
================================================================================================

1.4: Create BaseClass under testBase package and copy re-usable methods.
public class BaseClass {
    public WebDriver driver;


    @BeforeClass
    public void setup() {
        driver = new ChromeDriver();
        driver.manage().deleteAllCookies();
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

        driver.get("https://tutorialsninja.com/demo/");
        driver.manage().window().maximize();

    }

    @AfterClass
    public void tearDown() {
        driver.quit();
    }


    public String randomeString() {
        String generatedString = RandomStringUtils.randomAlphabetic(5);
        return generatedString;

    }

    public String numberString() {
        String generatedNumber = RandomStringUtils.randomNumeric(10);
        return generatedNumber;
    }

    public String randomAlphaNumeric() {
        String generatedString = RandomStringUtils.randomAlphabetic(5);
        String generatedNumber = RandomStringUtils.randomNumeric(10);
        return (generatedString + "@" + generatedString);
    }

}
====================================================================================
1.5: Create re-usable methods to generate random numbers and strings in BaseClass.


To generated a random sting we need a user defined method
===========================================================
RandomStringUtils.randomAlphabetic(5);  This comes from "import org.apache.commons.lang3.RandomStringUtils;"

public  String randomeString(){
   String generatedString = RandomStringUtils.randomAlphabetic(5);
    return generatedString;
}

public String numberString() {
   String generatedString = RandomStringUtils.randomNumeric(10);
     return generatedString;
}


Day-50
=========
Hybrid Framework | Logs, Properties, Cross Browser
========================================================================================================================

2) Adding logs to test case (log4j2)
===============================================
2.1: Add log4j2.xml file under src/test/resourses.
2.2: Update BaseClass.
2.3: Add log statements to AccountRegistrationTest


Logging - record all the events in the form of text. Log file is use to track the information. by that information necessary action can take up.

Log Levels - All < Trace < Debug < Info < Warn < Error < Fatal < Off


Appenders - where to generate logs (Console/File)
Loggers  - what type of logs generate (All < Trace < Debug < Info < Warn < Error < Fatal < Off)


import org.apache.logging.log4j.LogManager;  //Log4j
import org.apache.logging.log4j.Logger;  //Log4j

Types of logs
---------------
Application logs - internal logging in application we can not see that
Automation logs -

Steps for logging.
------------------
1) First we will create the log4j2.xml file in resource folder
2) After that in Base class we will implement it
  public Logger logger;


    @BeforeClass
    public void setup() {

        logger = LogManager.getLogger(this.getClass());//Log4j

        driver = new ChromeDriver();
        driver.manage().deleteAllCookies();
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

        driver.get("https://tutorialsninja.com/demo/");
        driver.manage().window().maximize();
    }
3)After that we will implement in test cases on which step we want log.
Ex: logger.info("***** Starting TC001_AccountRegistrationTest  ****");


3) Run Tests on Desired Browser/Cross Browser/Parallel
=====================================================================
3.1: Create testng.xml file to Run Test Cases and parameterize browser name and OS to BaseClass →setup() method.
in base class we have added

3.2: Update BaseClass →setup() method, launch browser based on conditions.
3.3: Maintain separate xml to run tests multiple browsers parallelly.




4) Read Common values from config.properties file.
===========================================================

4.1: Add config.properties file under src/test/resoures.
4.2: Update BaseClass →setup() method, add script to load config.properties file.
4.3: Replace hard coded values in Test Cases like url, username, password etc...





Day-51
=========
Hybrid Framework | Data Driven Tests | Apache POI
========================================================================================================================
username - qijojivy@mailinator.com
password - 123456789


5) Login Test Case
5.1: Create and update page object classes. LoginPage, MyAccountPage – new classes HomePage – update by adding login link element
5.2: Create LoginTest
5.3: Add entry testng.xml


6) Data Driven Login Test
6.1: Prepare test data in Excel, place the excel file inside the testData folder.
6.2: Create ExcelUtility class under utilities package.
6.3: Update Page Object class MyAccountPage , add logout link element)
6.4 : Create DataProviders class in utilities package to maintain data providers for data driven tests.
6.5: Create LoginDataDrivenTest under testCases package.
6.6: Add an Entry in testng.xml file



Day-52
=========
Hybrid Framework | Grouping Tests, Extent Reports
========================================================================================================================

7) Grouping Tests.
---------------------------------------
7.1: Add all test cases into specific group ( sanity, regression , master etc.).
7.2: Also add BaseClass methods setup() & teardown() to all groups.
7.3: Create separate TestNG xml file(grouping.xml) to run groups and include groups which we
want to execute.


8) Add Extent Reports to Project
--------------------------------------
8.1: Create ExtentReportUtility utility class under utilities package.
8.2: Add captureScreen() method in BaseClass
8.3: Add ExtentReportUtility (Listener class) entry in testng.xml file.
8.4: Make sure WebDriver is static in BaseClass, we refer same driver instance in ExtentReportUtility.


To get the parameters from xml file -
---------------------------------------
String os = testContext.getCurrentXmlTest().getParameter("os");
extent.setSystemInfo("Operating System", os);

String browser = testContext.getCurrentXmlTest().getParameter("browser");
extent.setSystemInfo("Browser", browser);

getCurrentXmlTest() - this method will return the xml file

To get the group information from xml file
---------------------------------------------
List<String> includedGroups = testContext.getCurrentXmlTest().getIncludedGroups();
if(!includedGroups.isEmpty()) {
extent.setSystemInfo("Groups", includedGroups.toString());
}

9) Run Failed Tests.
-----------------------------------
test-output→testng-failed.xml


Day-53
=========
Hybrid Framework | Run Tests on selenium Grid
========================================================================================================================

10) Run Tests on Selenium Grid (Standalone & Distributed Network)
-----------------------------------------------------------------

Pre-requisite: Grid Standalone/Hub & Node setup (Refer the Grid Setup document)
10.1: Add execution_env=local/remote in config.properties file under resources folder.
10.2: Update setup() method in the BaseClass (capture execution environment from config.properties file then add required capabilities of OS & Browser in conditions).
10.3: Run the tests from testing.xml.



Day-54
=========
Hybrid Framework | Docker Integration with SeleniumGrid
========================================================================================================================

11) Run Tests on Docker with Selenium Grid Environment.
--------------------------------------------------------
Refer the DockerSetup Document.

Containerization


Dockerhub ( repository) . Which contains multiple images. and by the image we create the container.

Dockerhub ( repository) -> multiple images --> Choose one image --> container.


we can run hub also on container. and in other container we can run different nodes.

Container 1 - Hub node
Container 2 - node1 (Windows)
Container 3 - node2 (Mac)
Container 4 - node3 (Linux)


Docker commands :
------------------

images command:
----------------

docker images             - show the images
docker pull(image name)   - pull the image and maintain in docker
docker rmi (imageID)      - Remove the images.

container commands:
---------------------
docker run -it ubuntu
docker ps                         - it will show what are all  container are running currently.
docker run <image name>           - it will create the container.
                                    if the image is not present then it will search the image and download the image then it will create the container of that image.
                                    Like that it will do two tasks.
docker start <container id/name>  - it will start the container
docker stop <container id/name>   - it will stop the container
docker rm <container id/name>     - it will remove the container

System related commands :
-------------------------
docker states


docker system df - it will show all the details like Images,Containers,Local Volumes,Build Cache
------------------
TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE
Images          1         0         87.57MB   87.57MB (100%)
Containers      0         0         0B        0B
Local Volumes   0         0         0B        0B
Build Cache     0         0         0B        0B

docker system prune - f - it will forcefully remove all the container and stop.



3 container
-------------
1)hub
2)linux-firefox
3)linux-chrome
4)linux-edge


docker network create grid
docker run -d -p 4442-4444:4442-4444 --net grid --name selenium-hub selenium/hub
docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub -e SE_EVENT_BUS_PUBLISH_PORT=4442 -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 selenium/node-chrome
docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub -e SE_EVENT_BUS_PUBLISH_PORT=4442 -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 selenium/node-firefox
docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub -e SE_EVENT_BUS_PUBLISH_PORT=4442 -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 selenium/node-edge


Day-55
=========
Hybrid Framework | Git & GitHub Workflow
========================================================================================================================


Run Tests using Maven pom.xml, Command Prompt & run.bat file.
----------------------------------------------------------------

pom.xml
----------
dependencies --- download required dependency jar for project
plugins  ---> to compile and run the project

1) maven compiler plugin
2) maven surefire plugin


Install maven OS level
--------------------
https://maven.apache.org/download.cgi

C:\Program Files\apache-maven-3.9.6\bin
** configure the maven path in environment variable.

open command prompt  -->   mvn -version


Configure Maven path in Mac OS
---------------------------
In terminal, type echo $SHELL
In terminal, type vi ~/.zshrc
Press i for insert and type export MAVEN_HOME=$(/usr/libexec/maven_home)
Press esc :wq

In the terminal:

echo $MAVEN_HOME
mvn -version

Project location:
-------------------
C:\Automation\myworkspaces\seleniumwebdriver\OpencartV121

cd C:\Automation\myworkspaces\seleniumwebdriver\OpencartV121
mvn test


----------------------------------------
Git & GitHub
----------------------------------------

Pre-requisites
-------------------
1) Git installation
2) create an account with GitHub & create remote repository then capture url
	Account creation:  https://github.com/signup?source=login
	repository url:  https://github.com/pavanoltraining/OpencartV121.git


Git & GitHub workflow
--------------------

Round1
----
1)  create a new local repository  ( one time)
git init


2) provided user info to git repo. (one time)

	git config --global user.name "your name"
    	git config --global user.email "your email"


3) Adding files/folders to staging/indexing
    git add -A         -->add all the files and folders to staging
    git add filename
    git add *.java
    git add foldername

4) Commit the code into Local(git) repository
	git commit -m "commit message"

5) connect local repository with remote rep.(One time)
	git remote add origin "https://github.com/pavanoltraining/OpencartV121.git"


6) push the code into remote repository.
   	git push origin master

token:  (**Create your own Token)



Round2
------
1) git add -A
2) git commit -m "commit message"
3) git push origin master

Pull the files from remote repository
---------------
git pull "https://github.com/pavanoltraining/OpencartV121.git"


clone new repository to local system
-------------------------
git clone "https://github.com/pavanoltraining/testrepo.git"


Day-56
=========
Hybrid Framework | Jenkins CI Setup | (Final Session)
========================================================================================================================

















